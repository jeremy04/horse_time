<script>
  var eligibleHorses;
  var draftOrder;
  var pickCount = <%= @pick_count %>;
  var spareHorses = [];
  var pubnub = PUBNUB({
      subscribe_key: 'sub-c-ce8ecf20-6eb2-11e5-ba34-02ee2ddab7fe', 
      publish_key: 'pub-c-af81b32e-d0dd-48a3-bac3-fbf02d262285'    
    });


  <% if @draft_over %>
    setTimeout("location.reload(true);", 30000);
  <% end %>

  function getCookieValue(a, b) {
    b = document.cookie.match('(^|;)\\s*' + a + '\\s*=\\s*([^;]+)');
    return b ? b.pop() : '';
  }

  function horsesLeft(roster, eligibleHorses)
  {
    used = _.flatten(_.map(_.values(roster), function(obj) { 
      return obj.horse_team.concat(obj.other_team) 
    }));

    return _.difference(eligibleHorses.horse_team.concat(eligibleHorses.other), used);
  }

  function top_points(players, goals)
  {
    players =  _.map(players, function(player) {
      hash = {};

      lookup_player = _.findWhere(goals, {"name": player });
      if (lookup_player === undefined || lookup_player === null)
      {
        console.log("Problem with: " + player);
        hash[player] = 0;
      }
      else {
        hash[player] = lookup_player.points;
      }
      return hash;
    });
    
    players = _.sortBy(players, function(player) {
      return -_.values(player)[0];
    });
    return players.slice(0, 5);
  }

  function displayStats(eligibleHorses)
  {
    $.get("/scores.json", { horse_team: "<%= @horse_team %>", room_code: "<%= @room_code %>" },function(data) 
      {
        _.each(data.goals, function(points, player){
          $('p[data-horse="' + player + '"]').append(" G: " + points);
        });

        _.each(data.assists, function(points, player){
          $('p[data-horse="' + player + '"]').append(" A: " + points);
        });

        var goals = data.goals;
        var assists = data.assists;
      
        goals = _.map(goals, function(value, key) { 
          var hsh = {};
          hsh["name"] = key;
          hsh["points"] = value;
          return hsh;
        });

        assists = _.map(assists, function(value, key) { 
          var hsh = {};

          hsh["name"] = key;
          hsh["points"] = value;
          return hsh;
        });

        var points = goals.concat(assists);
        points = _(points).groupBy("name");
        
        points = _(points).map(function(g, key) {
          return { name: key, 
                   points: _(g).reduce(function(m,x) { return m + x.points; }, 0) };
        });

        _.each(top_points(eligibleHorses.horse_team, points), function(player) {
          $("#horse_team_scorers").append("<p class='indent'>" + _.keys(player)[0] + " : " +  _.values(player)[0] + "</p>");
        });

        _.each(top_points(eligibleHorses.other, points), function(player) {
          $("#other_team_scorers").append("<p class='indent'>" + _.keys(player)[0] + " : " +  _.values(player)[0] + "</p>");
        });
  
      });
  }

  function updateRound(message)
  {
    console.log(message.player +" picked " + message.horse);
    $("#horses_selected #" + message.player + "_horses").append("<p class='indent'>" + message.horse + "</p>");

    spareHorses = _.without(spareHorses, message.horse);
    $("#draft" + message.player).css("display", "none");
    $("input[name=\"" + message.player + "\"]").css("display", "none");
    $("input[name=\"" + message.player + "\"]").val('');
    $("#" + message.player).css("color", "black");
    pickCount += 1;
    nextPlayer = pickOrder[pickCount];
    jQuery.noConflict();
    $("input[name=\"" + nextPlayer + "\"]").autocomplete({
      orientation: "auto",
      minChars: '2',
      lookup: spareHorses,
      onSelect: function() { return; }
    });
    
    var ht_cookie = JSON.parse(unescape(getCookieValue("horsetime")));

    if (ht_cookie.name == nextPlayer) {
      $("#draft" + nextPlayer).css("display", "inline");
      $("#draft" + nextPlayer).prop("disabled",false);
      $("input[name=\"" + nextPlayer + "\"]").css("display", "inline");                
    }

    if (message.player == nextPlayer)
    {
      $("#" + nextPlayer).css("color", "green");
    }
    else
    {
      $("#" + nextPlayer).css("color", "red");  
    }

    if (pickCount > (draftOrder.length * 4))
    {
      $("#navbar").remove();
      setTimeout("location.reload(true);", 30000);
    }

  }

  function generateDraft(draftOrder, pickOrder) 
  {
    $("#" + pickOrder[pickCount]).css("color","red");
    
    pubnub.subscribe({
      channel: 'horse_selected',
      message: updateRound,
      error: function (error) { console.log(JSON.stringify(error));}
    });

    _.each(draftOrder, function(player) {
      
      var fullRoster = roster[player]["horse_team"].concat(roster[player]["other_team"]);
     
      _.each(fullRoster, function(horse) {
        $("#horses_selected #" + player + "_horses").append("<p data-horse='" + horse + "' class='indent'>" + horse + "</p>");
      });
      
      $("input[name=\"" + player + "\"]").keypress(function (e) {
        if (e.which == 13) {
           $("#draft" + player).click();
        }
      });

      $("#draft" + player).on("click", function(){
        
        var currentPlayer = pickOrder[pickCount];
        /* Validations */

        var selection = $("input[name=\"" + currentPlayer + "\"]").val();
        if (selection == "") { alert("Select a horse bro!"); return; }
        if (!_.contains(spareHorses, selection)) { alert("That's not a horse, bro"); return; }

        var currentPicks = roster[currentPlayer];

        if (_.contains(eligibleHorses.other, selection) && currentPicks.other_team.length == <%= @horses_per %>)
        {
          alert("You already have the limit for other team bro");
          return;
        }

        if (_.contains(eligibleHorses.horse_team, selection) && currentPicks.horse_team.length == <%= @horses_per %>)
        {
          alert("You already have the limit for penguins bro");
          return;
        }

        /* End of Validations */

        $(this).prop("disabled",true);

        if(_.contains(eligibleHorses.other, selection)) {
          currentPicks.other_team.push(selection);
          var other_team_horse = selection;
        }
        else
        {
          currentPicks.horse_team.push(selection);
          var primary_team_horse = selection;
        }

        // UPDATE REDIS
        roster[currentPlayer] = currentPicks;
        
        $.post('/update_pick.json', 
          { room_code: "<%= @room_code %>",
            horse_team: primary_team_horse, 
            other_team: other_team_horse, 
            name: currentPlayer
          }, 
            function(returnedData){
              console.log(returnedData);
        });

        pubnub.publish({
           channel: 'horse_selected',        
           message:  {
                      player: currentPlayer,
                      horse: selection
                     }
        });


      });

    });
}

  $( document ).ready(function() {

    function show_draft(pickOrder) {
      randomPlayers = <%= @players.to_json %>;

      _.each(randomPlayers, function(player, id) {

        var player_id = player.replace(/\s/, '');

        $("#selectHorseContainer").append("<p id='" + player_id + "'>" + player );
        $("#horses_selected").append("<div id='" + player_id + "_horses'><h4><u>" + player + "</u></h4></div>");

        $("#selectHorseContainer").append("<input type='text' style=\"display: none\" class=\"form-control\" autocomplete=\"on\" name=\"" + player_id + "\"><button type='submit' style=\"display: none\" class=\"btn btn-default\" id=\"draft" + player_id +  "\" role=\"button\">Draft</button></p>");

          jQuery.noConflict();

          $("input[name=\"" + player_id + "\"]").autocomplete({
            orientation: 'auto',
            minChars: '2',
            lookup: spareHorses,
            onSelect: function() { return; }
          });
        
        var ht_cookie = JSON.parse(unescape(getCookieValue("horsetime")));
       
        if (ht_cookie.name == pickOrder[pickCount] ) {
          $("#draft" + ht_cookie.name).css("display", "inline");
          $("input[name=\"" + ht_cookie.name + "\"]").css("display", "inline");
        }

      });

    }


    $.get("/players.json", { horse_team: "<%= @horse_team %>", room_code: "<%= @room_code %>" }, function( data ) {
        draftOrder = <%= @players.to_json %>;
        roster = <%= @roster.to_json %>;

        eligibleHorses = data;
        
        console.log("Eligible Horses" + JSON.stringify(eligibleHorses));

        spareHorses = horsesLeft(roster, eligibleHorses);

        pickOrder = <%= @pick_order.to_json %>;

        show_draft(pickOrder);
        generateDraft(draftOrder, pickOrder);

        displayStats(eligibleHorses);

    });


    

});
</script>
<div class="row">
<div class="col-md-4" id="selectHorse">
  <h2>Draft Order</h2>
  <div id='selectHorseContainer'>
  </div>
</div>
<div class="col-md-4" id="horses">
  <h2>Horses Selected</h2>
  <div id="horses_selected">
  </div>
</div>

<div class="col-md-4" id="tophorses">
  <h2>Leading Scorers</h2>
  <div id="top_horses">
    <h3><%= @horse_team %></h3>
    <div id="horse_team_scorers">
    </div>
    <BR />
    <h3><%= @other_team %></h3>
    <div id="other_team_scorers">
    </div>
  </div>
</div>

</div>

<hr>
<script>
  var eligibleHorses;
  var timer;
  var draftOrder;
  var pickCount = <%= @pick_count %>;
  var spareHorses = [];
  var pubnub = PUBNUB({
      subscribe_key: 'sub-c-ce8ecf20-6eb2-11e5-ba34-02ee2ddab7fe', 
      publish_key: 'pub-c-af81b32e-d0dd-48a3-bac3-fbf02d262285'    
    });
  var shotTotals = {};


  <% if @game_over %>
    setTimeout("location.reload(true);", 30000);
  <% end %>


  function countdown( elementName, minutes, seconds )
  {
      var element, endTime, hours, mins, msLeft, time;

      function twoDigits( n )
      {
          return (n <= 9 ? "0" + n : n);
      }

      function updateTimer()
      {
          msLeft = endTime - (+new Date);
          if ( msLeft < 1000 ) {
              element.innerHTML = "countdown's over!";
          } else {
              time = new Date( msLeft );
              hours = time.getUTCHours();
              mins = time.getUTCMinutes();
              element.innerHTML = (hours ? hours + ':' + twoDigits( mins ) : mins) + ':' + twoDigits( time.getUTCSeconds() );
              timer = setTimeout( updateTimer, time.getUTCMilliseconds() + 500 );
          }
      }

      element = document.getElementById( elementName );
      endTime = (+new Date) + 1000 * (60*minutes + seconds) + 500;
      updateTimer();
  }


  function getCookieValue(a, b) {
    b = document.cookie.match('(^|;)\\s*' + a + '\\s*=\\s*([^;]+)');
    return b ? b.pop() : '';
  }

  function horsesLeft(roster, eligibleHorses)
  {
    used = _.flatten(_.map(_.values(roster), function(obj) { 
      return obj.horse_team.concat(obj.other_team) 
    }));

    return _.difference(eligibleHorses.horse_team.concat(eligibleHorses.other_team), used);
  }

  function toTitleCase(str)
  {
    return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
  }

  function top_points(players, goals)
  {
    players = _.difference(spareHorses, players);
    players =  _.map(players, function(player) {
      hash = {};

      lookup_player = _.findWhere(goals, {"name": player.toLowerCase() });
      if (lookup_player === undefined || lookup_player === null)
      {
        console.log("Problem with: " + player);
        hash[player] = {};
      }
      else {
        hash[player] = lookup_player;
      }
      return hash;
    });
    
    players = _.chain(players).sortBy(function(player) {
      return _.values(player)[0].goals;
    }).sortBy(function(player) {
      return _.values(player)[0].points;
    }).reverse().value();

    return players.slice(0, 5);
  }

  function displayRoster(eligibleHorses, data)
  {

    _.each(top_points(eligibleHorses.horse_team, data), function(player) {
      $("#other_team_scorers table").append("<tr>"
        + "<td><p class='indent'>" + _.keys(player)[0] + "</p></td>" 
        + "<td><p class='indent'>" +  "P: " +  _.values(player)[0].points + "</p></td>"
        + "<td><p class='indent'>" +  "G: " + _.values(player)[0].goals + "</p></td>"
        + "<td><p class='indent'>" +  "A: " + _.values(player)[0].assists + "</p></td>"
        +  "</tr><tr class='separator' />");
    });

    _.each(top_points(eligibleHorses.other_team, data), function(player) {
       $("#horse_team_scorers table").append("<tr>"
        + "<td><p class='indent'>" + _.keys(player)[0] + "</p></td>" 
        + "<td><p class='indent'>" +  "P: " +  _.values(player)[0].points + "</p></td>"
        + "<td><p class='indent'>" +  "G: " + _.values(player)[0].goals + "</p></td>"
        + "<td><p class='indent'>" +  "A: " + _.values(player)[0].assists + "</p></td>"
        +  "</tr><tr class='separator' />");
    });

  }

  function displayGoals()
  {
    $.get("/scores.json", { horse_team: "<%= @horse_team %>", room_code: "<%= @room_code %>" },function(data) 
      {
       
        roster = <%= @roster.to_json %>;

        _.each(data.goals, function(points, player){
          player = player.replace(/'/g, '');
          _.each(_.keys(roster), function(value) {
            var fullRoster = roster[value]["horse_team"].concat(roster[value]["other_team"]);

            if(_.contains(fullRoster, toTitleCase(player) )) {
              shotTotals[value] += (points);
            }
          });

          $('p[data-horse="' + toTitleCase(player) + '"]').append(" G: " + points);
        });

        _.each(data.assists, function(points, player) {
          player = player.replace(/'/g, '');
          _.each(_.keys(roster), function(value) {
            var fullRoster = roster[value]["horse_team"].concat(roster[value]["other_team"]);

            if(_.contains(fullRoster, toTitleCase(player)) ) {
              shotTotals[value] += (points / 2);
            }
          });

          $('p[data-horse="' + toTitleCase(player) + '"]').append(" A: " + points);
        });

        _.each(_.keys(roster), function(value) {
         $("#" + value + "_horses h4").append(" - " + shotTotals[value])
        });

      });
  }

  function updateRound(message)
  {
    if (message.over) {
      $("#autodraft-div").css("display", "none");
    }
    console.log(message.player +" picked " + message.horse);
    $("#horses_selected #" + message.player + "_horses").append("<p class='indent'>" + message.horse + "</p>");

    spareHorses = _.without(spareHorses, message.horse);
    $("#draft" + message.player).css("display", "none");
    $("input[name=\"" + message.player + "\"]").css("display", "none");
    $("input[name=\"" + message.player + "\"]").val('');
    $("#" + message.player).css("color", "black");
    

    $.get("/get_players.json", { room_code: "<%= @room_code %>" },
      function(data)
      {
        pickCount = data.pickCount;
        nextPlayer = pickOrder[pickCount];
        
        $("#autodraft").val(nextPlayer);

        jQuery.noConflict();
        $("input[name=\"" + nextPlayer + "\"]").autocomplete({
          orientation: "auto",
          minChars: '2',
          lookup: spareHorses,
          onSelect: function() { return; }
        });
        
        var ht_cookie = JSON.parse(unescape(getCookieValue("horsetime")));

        if (ht_cookie.name == nextPlayer) {
          $("#draft" + nextPlayer).css("display", "inline");
          $("#draft" + nextPlayer).prop("disabled",false);
          $("input[name=\"" + nextPlayer + "\"]").css("display", "inline");                
        }

        if (message.player == nextPlayer)
        {
          $("#" + nextPlayer).css("color", "green");
        }
        else
        {
          $("#" + nextPlayer).css("color", "red");  
        }

        if (pickCount > (draftOrder.length * 4))
        {
          $("#navbar").remove();
          setTimeout("location.reload(true);", 30000);
        }

        clearTimeout(timer);
        countdown( "countdown", 4, 0 );


      });

  }

  function generateDraft(draftOrder, pickOrder) 
  {
    $("#" + pickOrder[pickCount]).css("color","red");
    
    $("#autodraft").val(pickOrder[pickCount]);

    pubnub.subscribe({
      channel: 'horse_selected',
      message: updateRound,
      error: function (error) { console.log(JSON.stringify(error));}
    });

    _.each(draftOrder, function(player) {
      
      var fullRoster = roster[player]["horse_team"].concat(roster[player]["other_team"]);
     
      _.each(fullRoster, function(horse) {
        horse = horse.replace(/'/g, '');

        $("#horses_selected #" + player + "_horses").append("<p data-horse='" + horse + "' class='indent'>" + horse + "</p>");
      });
      
      $("input[name=\"" + player + "\"]").keypress(function (e) {
        if (e.which == 13) {
           $("#draft" + player).click();
        }
      });

      $("#draft" + player).on("click", function(){
        
        var currentPlayer = pickOrder[pickCount];
        /* Validations */

        var selection = $("input[name=\"" + currentPlayer + "\"]").val();
        if (selection == "") { alert("Select a horse bro!"); return; }
        if (!_.contains(spareHorses, selection)) { alert("That's not a horse, bro"); return; }

        var currentPicks = roster[currentPlayer];

        if (_.contains(eligibleHorses.other_team, selection) && currentPicks.other_team.length == <%= @horses_per %>)
        {
          alert("You already have the limit for other team bro");
          return;
        }

        if (_.contains(eligibleHorses.horse_team, selection) && currentPicks.horse_team.length == <%= @horses_per %>)
        {
          alert("You already have the limit for penguins bro");
          return;
        }

        /* End of Validations */

        $(this).prop("disabled",true);

        if(_.contains(eligibleHorses.other_team, selection)) {
          currentPicks.other_team.push(selection);
          var other_team_horse = selection;
        }
        else
        {
          currentPicks.horse_team.push(selection);
          var primary_team_horse = selection;
        }

        // UPDATE REDIS
        
        currentPicks.horse_team = _.uniq(currentPicks.horse_team);
        currentPicks.other_team = _.uniq(currentPicks.other_team);
        
        roster[currentPlayer] = currentPicks;

        
        $.post('/update_pick.json', 
          { room_code: "<%= @room_code %>",
            horse_team: primary_team_horse, 
            other_team: other_team_horse, 
            name: currentPlayer
          }, 
            function(returnedData){
              if(returnedData.errors.length > 0) {
                alert(returnedData.errors[0]);
                return;
              }
              pubnub.publish({
                channel: 'horse_selected',        
                message:  {
                      player: currentPlayer,
                      horse: selection
                }
              });


        });


      });

    });
}

  $( document ).ready(function() {

    function show_draft(pickOrder) {
      randomPlayers = <%= @players.to_json %>;

      _.each(randomPlayers, function(player, id) {

        var player_id = player.replace(/\s/, '');
        
        shotTotals[player_id] = 0;

        $("#selectHorseContainer").append("<p id='" + player_id + "'>" + player );
        $("#horses_selected").append("<div id='" + player_id + "_horses'><h4><u>" + player + "</u></h4></div>");

        $("#selectHorseContainer").append("<input type='text' style=\"display: none\" class=\"form-control\" autocomplete=\"on\" name=\"" + player_id + "\"><button type='submit' style=\"display: none\" class=\"btn btn-default\" id=\"draft" + player_id +  "\" role=\"button\">Draft</button></p>");

          jQuery.noConflict();

          $("input[name=\"" + player_id + "\"]").autocomplete({
            orientation: 'auto',
            minChars: '2',
            lookup: spareHorses,
            onSelect: function() { return; }
          });
        
        var ht_cookie = JSON.parse(unescape(getCookieValue("horsetime")));
       
        if (ht_cookie.name == pickOrder[pickCount] ) {
          $("#draft" + ht_cookie.name).css("display", "inline");
          $("input[name=\"" + ht_cookie.name + "\"]").css("display", "inline");
        }

      });

    }


    $.get("/season_stats.json", { horse_team: "<%= @horse_team %>", room_code: "<%= @room_code %>" }, function( data ) {
        draftOrder = <%= @players.to_json %>;
        roster = <%= @roster.to_json %>;
        
        // transform season_stats to eligibleHorses

        eligibleHorses = _.map(data, function(obj) { return [obj.location, obj.name] });
        eligibleHorses = _.groupBy(eligibleHorses, function(obj) { return obj[0] });
        eligibleHorses = _.mapObject(eligibleHorses, function(value, key) { 
          return _.map(value, function(p) { 
            return toTitleCase(p[1])
          }) });

        spareHorses = horsesLeft(roster, eligibleHorses);

        pickOrder = <%= @pick_order.to_json %>;

        show_draft(pickOrder);
        generateDraft(draftOrder, pickOrder);

        displayRoster(eligibleHorses, data);
        displayGoals();
        timer = countdown( "countdown", 4, 0 );

    });

    $("#auto_draft_btn").on("click", function(event){
      event.preventDefault();

      $(this).attr("disabled", 'disabled');

      $.get('/auto_pick.json', {       game_team: "<%= @horse_team %>", 
                                       name: $("#autodraft").val(),
                                       room_code: "<%= @room_code %>" 
                                     }, 
        function(returnedData){
          console.log("WOOO");

          $("#auto_draft_btn").removeAttr('disabled');
        });


    });


    

});
</script>
<div class="row">
<div class="col-md-4" id="selectHorse">
  <h2>Draft Order</h2>
  <div id='selectHorseContainer'>
  </div>
</div>
<div class="col-md-4" id="horses">
  <h2>Horses Selected</h2>
  <div id="horses_selected">
  </div>
</div>

<div class="col-md-4" id="tophorses">
  <h2>Leading Scorers</h2>
  <div id="top_horses">
    <h3><%= @horse_team %></h3>
    <div id="horse_team_scorers">
      <table>
      </table>
    </div>
    <BR />
    <h3><%= @other_team %></h3>
    <div id="other_team_scorers">
      <table>
      </table>
    </div>
  </div>
</div>
<% if @manager == @user && (!@game_over) %>
<div class="col-md-4" id='autodraft-div'>
  <h2>AutoDraft</h2>
  <div>
    <div id="countdown"></div>
    <input type='hidden' name="name" id='autodraft'>
    <a class="btn btn-default" id="auto_draft_btn" role="button">Autodraft</a>

  </div>
</div>
<% end %>

</div>

<hr>